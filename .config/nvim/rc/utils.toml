[[plugins]]
repo="windwp/nvim-autopairs"
lua_source='''
local status, autopairs = pcall(require, "nvim-autopairs")
if not status then
	return
end
autopairs.setup({
disable_filetype = { "TelescopePrompt", "vim" },
})
'''

[[pluging]]
repo = "norcalli/nvim-colorizer.lua"
lua_source='''
local status, colorizer = pcall(require, "colorizer")
if not status then
	return
end

vim.opt.termguicolors = true
colorizer.setup({
	"*",
})
'''

[[plugins]]
repo="numToStr/Comment.nvim"
lua_source='''
local status, comment = pcall(require, "Comment")
if not status then
	return
end

comment.setup({
	---LHS of toggle mappings in NORMAL mode
	---@type table
	toggler = {
		---Line-comment toggle keymap
		line = "col",
		---Block-comment toggle keymap
		block = "cob",
	},
})
'''

[[plugins]]
repo="Decodetalkers/csv-tools.lua"
		# ft = {
		# 	"csv",
		# },
lua_source='''
local status, csvtools = pcall(require, "csvtools")
if not status then
	return
end

csvtools.setup({
	before = 10,
	after = 10,
	clearafter = true,
	-- this will clear the highlight of buf after move
	showoverflow = false,
	-- this will provide a overflow show
	titelflow = true,
	-- add an alone title
})
'''

[[plugins]]
repo="lukas-reineke/indent-blankline.nvim"
lua_source='''
require('ibl').setup({})
'''

[[plugins]]
repo="nvim-lualine/lualine.nvim"
lua_source='''
local status, lualine = pcall(require, "lualine")
if not status then
	return
end

lualine.setup({
	options = {
		icons_enabled = true,
		theme = "auto",
		section_separators = { left = "", right = "" },
		component_separators = { left = "", right = "" },
		disabled_filetypes = {},
	},
	sections = {
		lualine_a = { "mode" },
		lualine_b = { "branch" },
		lualine_c = {
			{},
		},
		lualine_x = {
			{
				"diagnostics",
				sources = { "nvim_diagnostic" },
				symbols = {
					error = " ",
					warn = " ",
					info = " ",
					hint = " ",
				},
			},
			"encoding",
			"filetype",
		},
		lualine_y = { "progress" },
		lualine_z = { "location" },
	},
	inactive_sections = {
		lualine_a = {},
		lualine_b = {},
		lualine_c = {
			{
				"filename",
				file_status = true, -- displays file status (readonly status, modified status)
				path = 1, -- 0 = just filename, 1 = relative path, 2 = absolute path
			},
		},
		lualine_x = { "location" },
		lualine_y = {},
		lualine_z = {},
	},
	tabline = {},
})
'''

[[plugins]]
repo="nvim-treesitter/nvim-treesitter"
lua_source='''
local status, ts = pcall(require, "nvim-treesitter.configs")
if not status then
	return
end
ts.setup({
	highlight = {
		enable = true,
		additional_vim_regex_highlighting = { "markdown" },
	},
	indent = { enable = false, disable = { "python" }}, 
	ensure_installed = {
		"tsx",
		"toml",
		"gitignore",
		"json",
		"yaml",
		"css",
		"html",
		"lua",
		"python",
		"cpp",
		"bash",
		"markdown",
		"markdown_inline",
		"latex",
	},
	autotag = { enable = true },
	yati = { enable = true, indent = { enable = false } },
	update_strategy = "lockfile",
})

local parser_config = require("nvim-treesitter.parsers").get_parser_configs()
parser_config.tsx.filetype_to_parsername = { "javascript", "typescript.tsx" }
'''

# auto pair and tag close
[[plugins]]
repo="windwp/nvim-ts-autotag"
	# event = "InsertEnter",
# surround
[[plugins]]
repo="kylechui/nvim-surround"
lua_source='''
require("nvim-surround").setup()
'''
# auto comment out
[[plugins]]
repo="luochen1990/rainbow"
lua_source='''
vim.g.rainbow_active = 1
'''
# dot repeat
[[plugins]]
repo="tpope/vim-repeat"
# utility
[[plugins]]
repo="nvim-lua/plenary.nvim"

[[plugins]]
repo="nvim-lua/popup.nvim"
# buffer sizer
[[plugins]]
repo="simeji/winresizer"
# show diff from recover file
[[plugins]]
repo="chrisbra/Recover.vim"

[[plugins]]
repo="jghauser/mkdir.nvim"
# keep lastest cursor position
[[plugins]]
repo="ethanholz/nvim-lastplace"
lua_source='''
require("nvim-lastplace").setup()
'''

[[plugins]]
repo="folke/todo-comments.nvim"
lua_source='''
local status, todocomments = pcall(require, "todo-comments")
if not status then
	return
end

todocomments.setup({})
local opts = { noremap = true, silent = true }
vim.keymap.set("n", "<Leader>tq", "<cmd>TodoQuickFix<cr>", opts)
'''

[[plugins]]
repo="kana/vim-smartword"
lua_source='''
vim.keymap.set("n", "w", "<Plug>(smartword-w)")
vim.keymap.set("n", "b", "<Plug>(smartword-b)")
vim.keymap.set("n", "e", "<Plug>(smartword-e)")
'''

[[plugins]]
repo="LeafCage/vimhelpgenerator"

[[plugins]]
repo="akinsho/nvim-bufferline.lua"
lua_source= """
print("Hello")
local status, bufferline = pcall(require, "bufferline")
if not status then
	return
end
bufferline.setup({
	options = {
		mode = "buffers",
		separator_style = "slant",
		always_show_bufferline = true,
		show_buffer_close_icons = false,
		show_close_icon = false,
		color_icons = true,
	},
	highlights = {
		separator = {
			fg = "#073642",
			bg = "#002b36",
		},
		separator_selected = {
			fg = "#073642",
		},
		background = {
			fg = "#657b83",
			bg = "#002b36",
		},
		buffer_selected = {
			fg = "#fdf6e3",
			bold = true,
			italic = false,
		},
		fill = {
			bg = "#073642",
		},
	},
})

vim.keymap.set("n", "<Tab>", "<Cmd>BufferLineCycleNext<CR>", {})
vim.keymap.set("n", "<S-Tab>", "<Cmd>BufferLineCyclePrev<CR>", {})
"""

[[plugins]]
repo="mattn/vim-sonictemplate"
on_hook='''
-- sonictemplateのキーマップの無効化
vim.g.sonictemplate_key = 0
vim.g.sonictemplate_intelligent_key = 0
vim.g.sonictemplate_postfix_key = 0
vim.g.sonictemplate_vim_template_dir = "~/.dotfiles/template"
'''

[[plugins]]
repo="kyazdani42/nvim-web-devicons"
lua_source='''
local status, icons = pcall(require, "nvim-web-devicons")
if not status then
	return
end

icons.setup({
	-- your personnal icons can go here (to override)
	-- DevIcon will be appended to `name`
	override = {},
	-- globally enable default icons (default to false)
	-- will get overriden by `get_icons` option
	default = true,
})
'''

[[plugsins]]
repo="hrsh7th/vim-vsnip"
on_hook='''
let g:vsnip_snippet_dir = vim.fn.stdpath("config") .. "/snippets"
let g:vsnip_choice_delay = 0

" Expand or jump
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
'''

[[plugins]]
repo='uga-rosa/ugaterm.nvim'
lua_source='''
local option = { noremap = true, silent = true }
vim.keymap.set({ "n", "t" }, "<C-t>", "<cmd>UgatermOpen -toggle<cr>", option)
'''
