[[pluging]]
repo = "norcalli/nvim-colorizer.lua"
lua_add='''
vim.opt.termguicolors = true
require("colorizer").setup({
	"*",
})
'''
# auto comment out
[[plugins]]
repo="luochen1990/rainbow"
lua_add='''
vim.g.rainbow_active = 1
'''
# dot repeat
[[plugins]]
repo="tpope/vim-repeat"
# utility
[[plugins]]
repo="nvim-lua/plenary.nvim"

# keep lastest cursor position
[[plugins]]
repo="ethanholz/nvim-lastplace"
on_event = ['BufRead']
lua_source='''
require("nvim-lastplace").setup()
'''

[[plugins]]
repo="kyazdani42/nvim-web-devicons"
lua_add='''
local status, icons = pcall(require, "nvim-web-devicons")
if not status then
	return
end

icons.setup({
	-- your personnal icons can go here (to override)
	-- DevIcon will be appended to `name`
	override = {},
	-- globally enable default icons (default to false)
	-- will get overriden by `get_icons` option
	default = true,
})
'''

[[plugins]]
repo='uga-rosa/ugaterm.nvim'
lua_add='''
local option = { noremap = true, silent = true }
vim.keymap.set({ "n", "t" }, "<C-t>", "<cmd>UgatermOpen -toggle<cr>", option)
'''

[[plugins]]
repo="windwp/nvim-autopairs"
on_event = ['InsertEnter']
lua_source='''
local status, autopairs = pcall(require, "nvim-autopairs")
if not status then
	return
end
autopairs.setup({
disable_filetype = { "TelescopePrompt", "vim" },
})
'''

[[plugins]]
repo="lukas-reineke/indent-blankline.nvim"
on_event = ['BufNewFile', 'BufRead']
lua_source='''
require('ibl').setup({})
'''

[[plugins]]
repo="nvim-lualine/lualine.nvim"
on_event = ['BufNewFile', 'BufRead']
lua_source='''
local status, lualine = pcall(require, "lualine")
if not status then
	return
end

lualine.setup({
	options = {
		icons_enabled = true,
		theme = "auto",
		section_separators = { left = "", right = "" },
		component_separators = { left = "", right = "" },
		disabled_filetypes = {},
	},
	sections = {
		lualine_a = { "mode" },
		lualine_b = { "branch" },
		lualine_c = {},
		lualine_x = { {
				"diagnostics",
				sources = { "nvim_diagnostic" },
				symbols = {
					error = " ",
					warn = " ",
					info = " ",
					hint = " ",
				},
			},
			"encoding",
			"filetype",
		},
		lualine_y = { "progress" },
		lualine_z = { "location" },
	},
	inactive_sections = {
		lualine_a = {},
		lualine_b = {},
		lualine_c = {
			{
				"filename",
				file_status = true, -- displays file status (readonly status, modified status)
				path = 1, -- 0 = just filename, 1 = relative path, 2 = absolute path
			},
		},
		lualine_x = { "location" },
		lualine_y = {},
		lualine_z = {},
	},
	tabline = {},
})
'''

# auto pair and tag close
[[plugins]]
repo="windwp/nvim-ts-autotag"
on_event = ['InsertEnter']
# surround
[[plugins]]
repo="kylechui/nvim-surround"
on_event = ['InsertEnter']
lua_source='''
require("nvim-surround").setup()
'''

[[plugins]]
repo="mattn/vim-sonictemplate"
on_cmd='Template'
lua_source='''
vim.g.sonictemplate_key = 0
vim.g.sonictemplate_intelligent_key = 0
vim.g.sonictemplate_postfix_key = 0
vim.g.sonictemplate_vim_template_dir = "~/.dotfiles/.config/nvim/template"
'''

[[plugins]]
repo='skanehira/denops-silicon.vim'
on_cmd='Silicon'

[[plugins]]
repo="numToStr/Comment.nvim"
on_event = ['BufNewFile', 'BufRead']
lua_source='''
local status, comment = pcall(require, "Comment")
if not status then
	return
end

comment.setup({
 ---LHS of toggle mappings in NORMAL mode
 ---@type table
 toggler = {
 	---Line-comment toggle keymap
 	line = "col",
 	---Block-comment toggle keymap
 	block = "cob",
	},
})
'''

[[plugins]]
repo="nvim-treesitter/nvim-treesitter"
on_event = ['BufNewFile', 'BufRead']
lua_source='''
local status, ts = pcall(require, "nvim-treesitter.configs")
if not status then
	return
end
ts.setup({
	highlight = {
		enable = true,
		additional_vim_regex_highlighting = { "markdown" },
	},
	indent = { enable = false, disable = { "python" }}, 
	ensure_installed = {
		"tsx",
		"toml",
		"gitignore",
		"json",
		"yaml",
		"css",
		"html",
		"lua",
		"python",
		"cpp",
		"bash",
		"markdown",
		"markdown_inline",
		"latex",
	},
	autotag = { enable = true },
	yati = { enable = true, indent = { enable = false } },
	update_strategy = "lockfile",
})

local parser_config = require("nvim-treesitter.parsers").get_parser_configs()
parser_config.tsx.filetype_to_parsername = { "javascript", "typescript.tsx" }
'''

[[plugins]]
repo="folke/todo-comments.nvim"
on_event = ['BufNewFile', 'BufRead']
lua_source='''
local status, todocomments = pcall(require, "todo-comments")
if not status then
	return
end

todocomments.setup({})
local opts = { noremap = true, silent = true }
vim.keymap.set("n", "<Leader>tq", "<cmd>TodoQuickFix<cr>", opts)
'''


[[plugins]]
repo="kana/vim-smartword"
on_event = ['BufNewFile', 'BufRead']
lua_source='''
vim.keymap.set("n", "w", "<Plug>(smartword-w)")
vim.keymap.set("n", "b", "<Plug>(smartword-b)")
vim.keymap.set("n", "e", "<Plug>(smartword-e)")
'''

[[plugins]]
repo="lewis6991/gitsigns.nvim"
on_event = ['BufNewFile', 'BufRead']
lua_source='''
require('gitsigns').setup()
'''

[[plugins]]
repo='lambdalisue/gin.vim'
on_event = ['BufNewFile', 'BufRead']
lua_source="""
vim.keymap.set({ 'n' }, '<leader>gs', '<Cmd>GinStatus<Cr>', {})
vim.keymap.set({ 'n' }, '<leader>gl', '<Cmd>GinLog --graph --oneline<Cr>', {})
vim.api.nvim_create_autocmd({ 'FileType' }, {
  pattern = { 'gin-diff', 'gin-log', 'gin-status' },
  callback = function()
    local keymap = vim.keymap.set
    local opts = { buffer = true, noremap = true }
    keymap({ 'n' }, 'c', '<Cmd>Gin commit<Cr>', opts)
    keymap({ 'n' }, 's', '<Cmd>GinStatus<Cr>', opts)
    keymap({ 'n' }, 'L', '<Cmd>GinLog --graph --oneline<Cr>', opts)
    keymap({ 'n' }, 'd', '<Cmd>GinDiff --cached<Cr>', opts)
    keymap({ 'n' }, 'q', '<Cmd>bdelete<Cr>', opts)
    keymap({ 'n' }, 'p', [[<Cmd>lua vim.notify("Gin push")<Cr><Cmd>Gin push<Cr>]], opts)
    keymap({ 'n' }, 'P', [[<Cmd>lua vim.notify("Gin pull")<Cr><Cmd>Gin pull<Cr>]], opts)
  end,
})

vim.api.nvim_create_autocmd({ 'FileType' }, {
  pattern = 'gin-status',
  callback = function()
    local keymap = vim.keymap.set
    local opts = { buffer = true, noremap = true }
    keymap({ 'n' }, 'h', '<Plug>(gin-action-stage)', opts)
    keymap({ 'n' }, 'l', '<Plug>(gin-action-unstage)', opts)
  end,
})
"""
# show diff from recover file
[[plugins]]
on_event=['SwapExists']
repo="chrisbra/Recover.vim"

[[plugins]]
repo='phaazon/hop.nvim'
on_event = ['BufNewFile', 'BufRead']
lua_source='''
local hop = require('hop')
hop.setup { keys = 'etovxqpdygfblzhckisuran' }
local directions = require('hop.hint').HintDirection
vim.keymap.set('', 'f', function()
  hop.hint_char1({ direction = directions.AFTER_CURSOR, current_line_only = true })
end, {noremap=true})
vim.keymap.set('', 'F', function()
  hop.hint_char1({ direction = directions.BEFORE_CURSOR, current_line_only = true })
end, {noremap=true})
vim.keymap.set('', 't', function()
  hop.hint_char1({ direction = directions.AFTER_CURSOR, current_line_only = true, hint_offset = -1 })
end, {noremap=true})
vim.keymap.set('', 'T', function()
  hop.hint_char1({ direction = directions.BEFORE_CURSOR, current_line_only = true, hint_offset = 1 })
end, {noremap=true})
'''

