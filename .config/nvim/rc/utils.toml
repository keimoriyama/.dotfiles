[[pluging]]
repo = "norcalli/nvim-colorizer.lua"
lua_add='''
local status, colorizer = pcall(require, "colorizer")
if not status then
	return
end
vim.opt.termguicolors = true
colorizer.setup({
	"*",
})
'''

[[plugins]]
repo="numToStr/Comment.nvim"
lua_add='''
local status, comment = pcall(require, "Comment")
if not status then
	return
end

comment.setup({
	---LHS of toggle mappings in NORMAL mode
	---@type table
	toggler = {
		---Line-comment toggle keymap
		line = "col",
		---Block-comment toggle keymap
		block = "cob",
	},
})
'''

[[plugins]]
repo="nvim-treesitter/nvim-treesitter"
lua_add='''
local status, ts = pcall(require, "nvim-treesitter.configs")
if not status then
	return
end
ts.setup({
	highlight = {
		enable = true,
		additional_vim_regex_highlighting = { "markdown" },
	},
	indent = { enable = false, disable = { "python" }}, 
	ensure_installed = {
		"tsx",
		"toml",
		"gitignore",
		"json",
		"yaml",
		"css",
		"html",
		"lua",
		"python",
		"cpp",
		"bash",
		"markdown",
		"markdown_inline",
		"latex",
	},
	autotag = { enable = true },
	yati = { enable = true, indent = { enable = false } },
	update_strategy = "lockfile",
})

local parser_config = require("nvim-treesitter.parsers").get_parser_configs()
parser_config.tsx.filetype_to_parsername = { "javascript", "typescript.tsx" }
'''
# auto comment out
[[plugins]]
repo="luochen1990/rainbow"
lua_add='''
vim.g.rainbow_active = 1
'''
# dot repeat
[[plugins]]
repo="tpope/vim-repeat"
# utility
[[plugins]]
repo="nvim-lua/plenary.nvim"

[[plugins]]
repo="nvim-lua/popup.nvim"

# buffer sizer
[[plugins]]
repo="simeji/winresizer"

# show diff from recover file
[[plugins]]
repo="chrisbra/Recover.vim"

# keep lastest cursor position
[[plugins]]
repo="ethanholz/nvim-lastplace"
lua_add='''
require("nvim-lastplace").setup()
'''

[[plugins]]
repo="folke/todo-comments.nvim"
lua_add='''
local status, todocomments = pcall(require, "todo-comments")
if not status then
	return
end

todocomments.setup({})
local opts = { noremap = true, silent = true }
vim.keymap.set("n", "<Leader>tq", "<cmd>TodoQuickFix<cr>", opts)
'''

[[plugins]]
repo="kana/vim-smartword"
lua_add='''
vim.keymap.set("n", "w", "<Plug>(smartword-w)")
vim.keymap.set("n", "b", "<Plug>(smartword-b)")
vim.keymap.set("n", "e", "<Plug>(smartword-e)")
'''

[[plugins]]
repo="kyazdani42/nvim-web-devicons"
lua_add='''
local status, icons = pcall(require, "nvim-web-devicons")
if not status then
	return
end

icons.setup({
	-- your personnal icons can go here (to override)
	-- DevIcon will be appended to `name`
	override = {},
	-- globally enable default icons (default to false)
	-- will get overriden by `get_icons` option
	default = true,
})
'''
