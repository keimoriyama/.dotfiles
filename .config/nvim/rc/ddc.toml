[[plugins]]
repo='Shougo/ddc.vim'
on_event = ['InsertEnter', 'CmdlineEnter']
depends=['denops.vim', 'nvim-lspconfig']
lua_add='''
vim.fn["ddc#set_static_import_path"]()
-- config of pum
vim.fn["pum#set_option"]({
	item_orders = { "abbr", "space", "kind", "space", "menu" },
	highlight_selected = "CursorLine",
	horizontal_menu = false,
	offset_cmdcol = 0,
	padding = false,
	use_setline = false,
	max_height=10
})
vim.keymap.set({"i", "c"}, "<C-n>", "<cmd>call pum#map#insert_relative(+1, 'loop')<cr>")
vim.keymap.set({"i", "c"}, "<C-p>", "<cmd>call pum#map#insert_relative(-1, 'loop')<cr>")
vim.keymap.set({"i", "c"}, "<C-y>", "<cmd>call pum#map#confirm()<cr>")
vim.keymap.set({"i", "c"}, "<C-e>", "<cmd>call pum#map#cancel()<cr>")
vim.fn['ddc#custom#load_config'](vim.fn.expand("$HOME/.config/nvim/rc/ddc.ts"))
require("ddc_source_lsp_setup").setup()
require("lspconfig").denols.setup({})
'''
lua_source='''
-- Use ddc
function _G.CommandlinePre(mode)
	vim.b["prev_buffer_config"] = vim.fn["ddc#custom#get_buffer"]()
	if mode == ":" then
		vim.fn["ddc#custom#patch_buffer"]("sourceOptions", { _ = {keywordPattern = "[0-9a-zA-Z_:#-]*", minAutoCompleteLength = 2, }})
	end
	vim.api.nvim_create_autocmd("User", {
		pattern="DDCCmdlineLeave",
		once = true,
		callback = function()
			if vim.fn.exists("b:prev_buffer_config") then
			  vim.fn["ddc#custom#set_buffer"](vim.b["prev_buffer_config"])
			  vim.b["prev_buffer_config"] = nil
			end
		end
	})
	vim.fn["ddc#enable_cmdline_completion"]()
end
-- コマンドライン補完の設定
vim.keymap.set({"n", 'x'}, ":", "<Cmd>call v:lua.CommandlinePre(':')<CR>:")
vim.fn["ddc#enable"]({context_filetype='treesitter'})
require("ddc_previewer_floating").enable()
'''

[[plugins]]
repo="Shougo/pum.vim"
on_source='ddc.vim'

[[plugins]]
repo="zbirenbaum/copilot.lua"
on_event="InsertEnter"
lua_source='''
local current_dir = vim.fn.getcwd()
if string.match(current_dir, "Atcoder") == nil then
	require("copilot").setup({
		panel = {
			enabled = false
		},
		suggestion = {
			enabled = true,
			auto_trigger = true,
			keymap = {
				accept = "<C-c>",
			}
		}
	})
	vim.keymap.set("i", "<C-c><C-t>", "<cmd>Copilot toggle<cr>")
end
'''

[[plugins]]
repo="Shougo/ddc-nvim-lsp"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-around"
on_source="ddc.vim"

[[plugins]]
repo="LumaKernel/ddc-file"
on_source="ddc.vim"

[[plugins]]
repo="matsui54/ddc-buffer"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-source-cmdline"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-source-cmdline-history"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-source-lsp"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-source-copilot"
on_source="ddc.vim"

[[plugins]]
repo="uga-rosa/ddc-source-nvim-lua"
on_source="ddc.vim"


[[plugins]]
repo="LumaKernel/ddc-source-file"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-sorter_rank"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-ui-pum"
depends = 'pum.vim'
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-ui-native"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-converter_remove_overlap"
on_source="ddc.vim"

[[plugins]]
repo="tani/ddc-fuzzy"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-matcher_head"
on_source="ddc.vim"

[[plugins]]
repo="tani/ddc-path"
on_source="ddc.vim"

[[plugins]]
repo="uga-rosa/ddc-source-lsp-setup"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-filter-converter_truncate_abbr"
on_source="ddc.vim"

[[plugins]]
repo="lambdalisue/guise.vim"
on_source="ddc.vim"

[[plugins]]
repo="uga-rosa/ddc-previewer-floating"
on_source="ddc.vim"

[[plugins]]
repo="vim-skk/skkeleton"
on_source='ddc.vim'
lua_source= """
vim.keymap.set({"i", "c", "t"}, "<C-j>", "<Plug>(skkeleton-toggle)", {noremap =true})
vim.fn['skkeleton#config']({
	globalJisyo = "~/.local/skkeleton/SKK-JISYO.L",
	debug =false,
	showCandidatesCount = 1
})
"""

[[plugins]]
repo = "uga-rosa/denippet.vim"
on_source = "ddc.vim"
lua_source="""
local snip_dir = vim.fn.expand("$HOME/.config/nvim/snippets")
for _, file in ipairs(vim.fn.glob(snip_dir .. "/*.toml", false, true)) do
	vim.fn["denippet#load"](file)
end
vim.cmd([[
inoremap <C-l> <Plug>(denippet-expand)
inoremap <expr> <Tab> denippet#jumpable() ? '<Plug>(denippet-jump-next)' : '<Tab>'
snoremap <expr> <Tab> denippet#jumpable() ? '<Plug>(denippet-jump-next)' : '<Tab>'
inoremap <expr> <S-Tab> denippet#jumpable(-1) ? '<Plug>(denippet-jump-prev)' : '<S-Tab>'
snoremap <expr> <S-Tab> denippet#jumpable(-1) ? '<Plug>(denippet-jump-prev)' : '<S-Tab>'
]])
"""

[[plugins]]
repo="delphinus/skkeleton_indicator.nvim"
on_source="ddc.vim"
lua_source="""
require("skkeleton_indicator").setup()
"""
