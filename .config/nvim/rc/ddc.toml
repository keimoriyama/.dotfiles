[[plugins]]
repo='Shougo/ddc.vim'
on_event = ['InsertEnter', 'CmdlineEnter']
depends=['denops.vim', 'nvim-lspconfig']
lua_source='''
local capabilities = require("ddc_nvim_lsp").make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true
require("lspconfig").denols.setup({
	capabilities = capabilities,
})
require("ddc_nvim_lsp_setup").setup()
-- Use around source.
vim.fn["ddc#custom#patch_global"]({
	ui = "pum",
	sources = {
		"nvim-lsp",
		"skkeleton",
		"file",
		'vsnip',
		"nvim-lua",
		"buffer",
		"around",
		'obsidian',
		'obsidian_new'
	},
	-- TODO:コマンドライン補完
	cmdlineSources = {
		[":"] = { "cmdline", "cmdline-history", "around" },
	},
	sourceOptions = {
		["_"] = {
			maxItems=8,
			matchers = { "matcher_head", "matcher_fuzzy" },
			sorters = { "sorter_rank" },
			converters = { "converter_fuzzy", "converter_remove_overlap", "converter_truncate_abbr" },
			minAutoCompleteLength = 1,
		},
		around = { mark = "[around]" },
		file = { mark = "[file]", isVolatile = true, forceCompletionPattern = [['\S/\S*']] },
		cmdline = { mark = "[cmdline]" },
		buffer = { mark = "[buffer]" },
		["nvim-lsp"] = {
			mark = "[lsp]",
			forceCompletionPattern = [['\.\w*|:\w*|->\w*']],
			keywordPattern = "\\k*",
			dup = "keep",
			sorters = { "sorter_fuzzy", "sorter_lsp-kind" }
		},
		["nvim-lua"] = { mark = "[lua]", forceCompletionPattern = "." },
		copilot = { mark = "[copilot]", minAutoCompleteLength = 1, isVolatile = true },
		vsnip={mark='[vsnip]'},
		["cmdline-history"] = { mark = "[cmdline-history]" },
		obsidian = {
			mark = "[obsidian]",
			keywordPattern= [[\[\[\k*]]
		},
		obsidian_new = {
			mark = "[obsidian+]",
			keywordPattern = [[\[\[\k*]]
		},
		skkeleton={
			mark='[skk]',
			matchers = { "skkeleton" },
			sorters = {},
			minAutoCompleteLength = 1,
			isVolatile = true
		},
	},
	sourceParams = {
		buffer = { requireSameFiletype = false, forceCollect = true },
		["nvim-lsp"] = {
			enableResolveItem = true,
			enableAdditionalTextEdit = true,
			snippetEngine = vim.fn["denops#callback#register"](function(body)
				vim.fn["vsnip#anonymous"](body)
			end),
			lspEngine='nvim-lsp'
		},
	},
})
-- path completion
vim.fn["ddc#custom#patch_filetype"]({ "ps1", "dosbatch", "autohotkey", "registry" }, {
	sourceOptions = {
		file = {
			forceCompletionPattern = [['\S\\\S*']],
			minAutoCompleteLength = 1,
		},
	},
	sourceParams = {
		file = {
			mode = [[win32]],
		},
	},
})
vim.g.signature_help_config = {
	contentsStyle = "currentLabel",
	viewStyle = "floating",
}
-- Use ddc
vim.fn["ddc#enable"]()
require("ddc_previewer_floating").enable()
'''

[[plugins]]
repo="Shougo/pum.vim"
on_source='ddc.vim'
lua_source="""
vim.fn["pum#set_option"]({
	item_orders = { "abbr", "space", "kind", "space", "menu" },
	highlight_selected = "CursorLine",
	horizontal_menu = false,
	offset_cmdcol = 0,
	padding = false,
	use_complete = true,
	use_setline = false,
	max_height=10
})
vim.keymap.set("i", "<C-n>", "<cmd>call pum#map#insert_relative(+1, 'loop')<cr>")
vim.keymap.set("i", "<C-p>", "<cmd>call pum#map#insert_relative(-1, 'loop')<cr>")
vim.keymap.set("i", "<C-y>", "<cmd>call pum#map#confirm()<cr>")
vim.keymap.set("i", "<C-e>", "<cmd>call pum#map#cancel()<cr>")
-- コマンドライン補完の設定
-- CommandlinePost()とCommandlinePre()のキーマップは必ず揃える
function CommandlinePre()
	local opt = { noremap = true, silent = true }
	vim.keymap.set("c", "<C-n>", "<cmd>call pum#map#insert_relative(+1, 'loop')<cr>", opt)
	vim.keymap.set("c", "<C-p>", "<cmd>call pum#map#insert_relative(-1, 'loop')<cr>", opt)
	vim.keymap.set("c", "<C-y>", "<cmd>call pum#map#confirm()<cr>", opt)
	vim.keymap.set("c", "<C-e>", "<cmd>call pum#map#cancel()<cr>", opt)
	vim.api.nvim_create_autocmd("User", {
		pattern="DDCCmdlineLeave",
		once = true,
		callback = function()
			vim.keymap.del("c", "<C-n>")
			vim.keymap.del("c", "<C-p>")
			vim.keymap.del("c", "<C-y>")
			vim.keymap.del("c", "<C-e>")
		end
	})
	vim.fn["ddc#enable_cmdline_completion"]()
end
vim.keymap.set("n", ":", [[<Cmd>lua CommandlinePre()<CR>:]])
"""

[[plugins]]
repo="zbirenbaum/copilot.lua"
on_event="InsertEnter"
lua_source='''
local current_dir = vim.fn.getcwd()
if string.match(current_dir, "Atcoder") == nil then
	require("copilot").setup({
		panel = {
			enabled = false
		},
		suggestion = {
			enabled = true,
			auto_trigger = true,
			keymap = {
				accept = "<C-c>",
			}
		}
	})
	vim.keymap.set("i", "<C-c><C-t>", "<cmd>Copilot toggle<cr>")
end
'''

[[plugins]]
repo="Shougo/ddc-nvim-lsp"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-around"
on_source="ddc.vim"

[[plugins]]
repo="LumaKernel/ddc-file"
on_source="ddc.vim"

[[plugins]]
repo="matsui54/ddc-buffer"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-source-cmdline"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-source-cmdline-history"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-source-nvim-lsp"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-source-copilot"
on_source="ddc.vim"

[[plugins]]
repo="uga-rosa/ddc-source-nvim-lua"
on_source="ddc.vim"

[[plugins]]
repo="uga-rosa/ddc-source-vsnip"
on_source="ddc.vim"

[[plugins]]
repo="LumaKernel/ddc-source-file"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-sorter_rank"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-ui-pum"
depends = 'pum.vim'
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-ui-native"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-converter_remove_overlap"
on_source="ddc.vim"

[[plugins]]
repo="tani/ddc-fuzzy"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-matcher_head"
on_source="ddc.vim"

[[plugins]]
repo="tani/ddc-path"
on_source="ddc.vim"

[[plugins]]
repo="uga-rosa/ddc-nvim-lsp-setup"
on_source="ddc.vim"

[[plugins]]
repo="Shougo/ddc-filter-converter_truncate_abbr"
on_source="ddc.vim"

[[plugins]]
repo="lambdalisue/guise.vim"
on_source="ddc.vim"

[[plugins]]
repo="uga-rosa/ddc-previewer-floating"
on_source="ddc.vim"

[[plugins]]
repo="vim-skk/skkeleton"
on_source='ddc.vim'
lua_source= """
vim.keymap.set({"i", "c", "t"}, "<C-j>", "<Plug>(skkeleton-toggle)", {noremap =true})
vim.fn['skkeleton#config']({
	globalJisyo = "~/.local/skkeleton/SKK-JISYO.L",
	debug = true,
	showCandidatesCount = 1
})
"""

[[plugsins]]
repo="hrsh7th/vim-vsnip"
on_source='ddc.vim'
on_hook='''
let g:vsnip_snippet_dir = vim.fn.stdpath("config") .. "/snippets"
let g:vsnip_choice_delay = 0

" Expand or jump
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
'''
